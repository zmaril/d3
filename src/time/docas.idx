f | year.js | s | 308B | 9 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | day.js | s | 503B | 13 | Mike Bostock | mbostock@gmail.com | 1329699604 |  | Add various weekday methods, and dayOfYear.  This commit augments d3.time.week and d3.time.weeks with weekday-specific methods, so that you may pick a starting day for the week other than Sunday. For backwards-compatibility, the new sunday methods have aliases:    d3.time.sunday = d3.time.week   d3.time.sundays = d3.time.weeks  This commit also adds new weekdayOfYear methods, so that you can determine the week number without needing to use a d3.time.format. For example, sundayOfYear returns the week number, where weeks start on Sunday; mondayOfYear does the same where weeks start on Monday. This commit also adds a dayOfYear method which returns the day-of-year number for a given date, similar to the time format's %j directive, but zero-based.  Fixes #512. Fixes #513.
f | hour.js | s | 417B | 10 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | minute.js | s | 356B | 9 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | week.js | s | 908B | 23 | Mike Bostock | mbostock@gmail.com | 1329699604 |  | Add various weekday methods, and dayOfYear.  This commit augments d3.time.week and d3.time.weeks with weekday-specific methods, so that you may pick a starting day for the week other than Sunday. For backwards-compatibility, the new sunday methods have aliases:    d3.time.sunday = d3.time.week   d3.time.sundays = d3.time.weeks  This commit also adds new weekdayOfYear methods, so that you can determine the week number without needing to use a d3.time.format. For example, sundayOfYear returns the week number, where weeks start on Sunday; mondayOfYear does the same where weeks start on Monday. This commit also adds a dayOfYear method which returns the day-of-year number for a given date, similar to the time format's %j directive, but zero-based.  Fixes #512. Fixes #513.
f | format-utc.js | s | 522B | 24 | Mike Bostock | mbostock@gmail.com | 1329626166 |  | Unify interval definitions via d3_time_utc.  Rather than having two implementations for local time and UTC time, we now have a single local-time implementation and use d3_time_utc to adapt for UTC.
f | interval.js | s | 1.5K | 60 | Mike Bostock | mbostock@gmail.com | 1329707923 |  | Add d3.time.{interval}.round.
f | scale.js | s | 3.9K | 124 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | time.js | s | 1.6K | 30 | Mike Bostock | mbostock@gmail.com | 1330543650 |  | Fixes #576: leap year bug in d3.time.format.  We need to set the date fields from year down, rather than in arbitrary order.
f | scale-utc.js | s | 1.4K | 31 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | format-iso.js | s | 384B | 9 | Mike Bostock | mbostock@gmail.com | 1318380373 |  | Add extended ISO 8601 support.  The d3.time.format.iso is designed to be compatible with the default JSON serialization of dates, which includes milliseconds. So, d3.time.format now supports the %L directive for formatting and parsing milliseconds. This commit also changes d3.time.format.iso to use native ISO date methods, if available.
f | month.js | s | 318B | 9 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | second.js | s | 356B | 9 | Mike Bostock | mbostock@gmail.com | 1329634614 |  | Add interval.range, and time.scale.nice.  This commit provides a standard interface for time intervals:    interval.floor(date)   interval.ceil(date)   interval.offset(date, k)   interval.range(start, stop, step)  All local-time intervals (such as d3.time.day) have a UTC-equivalent interval, available as interval.utc (such as d3.time.day.utc).  Fixes #463. Note that for the time.scale, an interval function is required to nice (such as d3.time.day). In the future, we might relax that to allow a count of ticks, similar to the ticks method, but in that case we'd also need the ability to floor to a given tick number (e.g., every other week) and likewise for ceil. This seems like a reasonable first implementation.
f | format.js | s | 8.2K | 247 | Jason Davies | jason@jasondavies.com | 1333458044 |  | Remove stray global "d3_time_weekdays".
